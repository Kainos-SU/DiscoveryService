"use strict";

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.function.name.js");

require("core-js/modules/es.regexp.exec.js");

var _sliceInstanceProperty2 = require("@babel/runtime-corejs3/core-js-stable/instance/slice");

var _Array$from = require("@babel/runtime-corejs3/core-js-stable/array/from");

var _Symbol = require("@babel/runtime-corejs3/core-js-stable/symbol");

var _getIteratorMethod = require("@babel/runtime-corejs3/core-js/get-iterator-method");

var _Array$isArray = require("@babel/runtime-corejs3/core-js-stable/array/is-array");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.parseStatus = exports.parseDispense = exports.isValidResponse = exports.formatMessage = void 0;

var _indexOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/index-of"));

var _slice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/slice"));

var _helpers = require("../ECDM/helpers");

var _constants = require("./constants");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o) || o["@@iterator"]; if (!it) { if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { var _context; if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = _sliceInstanceProperty2(_context = Object.prototype.toString.call(o)).call(_context, 8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return _Array$from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var isValidResponse = function isValidResponse(response) {
  var indexOfStartOfText = (0, _indexOf.default)(response).call(response, _constants.STANDARD_BYTES.START_OF_TEXT);

  if (indexOfStartOfText !== 2) {
    return false;
  }

  var indexOfCRC = (0, _indexOf.default)(response).call(response, _constants.STANDARD_BYTES.END_OF_TEXT) + 1;

  if (indexOfCRC < 6) {
    return false;
  }

  return (0, _helpers.checkXorCrc)((0, _slice.default)(response).call(response, indexOfStartOfText, indexOfCRC + 1));
};

exports.isValidResponse = isValidResponse;

var formatMessage = function formatMessage(command) {
  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var message = [_constants.STANDARD_BYTES.START_OF_TRANSMISSION, _constants.STANDARD_BYTES.COMM_IDENTITY, _constants.STANDARD_BYTES.START_OF_TEXT];
  message.push(command);

  var _iterator = _createForOfIteratorHelper(data),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var byte = _step.value;
      message.push(byte);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  message.push(_constants.STANDARD_BYTES.END_OF_TEXT);
  var crc = (0, _helpers.calculateXorCrc)(message);
  message.push(crc);
  return message;
};

exports.formatMessage = formatMessage;

var parseDispense = function parseDispense(data) {
  var indexOfStart = (0, _indexOf.default)(data).call(data, _constants.STANDARD_BYTES.START_OF_HEADER);
  var indexOfCRC = (0, _indexOf.default)(data).call(data, _constants.STANDARD_BYTES.END_OF_TEXT) + 1;
  var response = (0, _slice.default)(data).call(data, indexOfStart, indexOfCRC + 1);
  var ok = !(response[4] - 0x20);
  var crc = (0, _helpers.checkXorCrc)(response);
  var errorCode = response[4];
  var errorText = _constants.STATUS_CODES.get(response[4]) || "";
  var cassettes = [{
    cassetteNumber: 1,
    requestedBillCHK: response[5] - 0x20,
    requestedBillEXIT: response[5] - 0x20,
    rejectedBill: response[6] - 0x20,
    cassetteStatus: "OK!"
  }];
  return {
    ok: ok,
    crc: crc,
    errorCode: errorCode,
    errorText: errorText,
    cassettes: cassettes
  };
};

exports.parseDispense = parseDispense;

var parseStatus = function parseStatus(data) {
  var indexOfStart = (0, _indexOf.default)(data).call(data, _constants.STANDARD_BYTES.START_OF_HEADER);
  var indexOfCRC = (0, _indexOf.default)(data).call(data, _constants.STANDARD_BYTES.END_OF_TEXT) + 1;
  var trimmedData = (0, _slice.default)(data).call(data, indexOfStart, indexOfCRC + 1);
  var data0 = trimmedData[4];
  var data1 = trimmedData[5];
  var AVERAGE_THICKNESS = trimmedData[6] - 0x20;
  var AVERAGE_LENGTH = trimmedData[7] - 0x20;
  var FEED_SENSOR_BLOCKED = Boolean(_constants.STATUS_BIT_SHIFT.FEED_SENSOR_BLOCKED && data0);
  var EXIT_SENSOR_BLOCKED = Boolean(_constants.STATUS_BIT_SHIFT.EXIT_SENSOR_BLOCKED && data0);
  var RESET_SINCE_LAST_STATUS_MESSAGE = Boolean(_constants.STATUS_BIT_SHIFT.RESET_SINCE_LAST_STATUS_MESSAGE && data0);
  var TIMING_WHEEL_SENSOR_BLOCKED = Boolean(_constants.STATUS_BIT_SHIFT.TIMING_WHEEL_SENSOR_BLOCKED && data0);
  var CALIBRATING_DOUBLE_DETECT = Boolean(_constants.STATUS_BIT_SHIFT.CALIBRATING_DOUBLE_DETECT && data1);
  return {
    FEED_SENSOR_BLOCKED: FEED_SENSOR_BLOCKED,
    EXIT_SENSOR_BLOCKED: EXIT_SENSOR_BLOCKED,
    RESET_SINCE_LAST_STATUS_MESSAGE: RESET_SINCE_LAST_STATUS_MESSAGE,
    TIMING_WHEEL_SENSOR_BLOCKED: TIMING_WHEEL_SENSOR_BLOCKED,
    CALIBRATING_DOUBLE_DETECT: CALIBRATING_DOUBLE_DETECT,
    AVERAGE_THICKNESS: AVERAGE_THICKNESS,
    AVERAGE_LENGTH: AVERAGE_LENGTH
  };
};

exports.parseStatus = parseStatus;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,