"use strict";

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.function.name.js");

require("core-js/modules/es.regexp.exec.js");

var _sliceInstanceProperty2 = require("@babel/runtime-corejs3/core-js-stable/instance/slice");

var _Array$from = require("@babel/runtime-corejs3/core-js-stable/array/from");

var _Symbol = require("@babel/runtime-corejs3/core-js-stable/symbol");

var _getIteratorMethod = require("@babel/runtime-corejs3/core-js/get-iterator-method");

var _Array$isArray = require("@babel/runtime-corejs3/core-js-stable/array/is-array");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.calculateCrc = calculateCrc;
exports.checkCrc = checkCrc;
exports.formatMessage = formatMessage;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/slicedToArray"));

var _indexOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/index-of"));

var _slice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/slice"));

var _typed_constants = require("./typed_constants");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o) || o["@@iterator"]; if (!it) { if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { var _context; if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = _sliceInstanceProperty2(_context = Object.prototype.toString.call(o)).call(_context, 8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return _Array$from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var SEQ_SYNC_BIT = 0x80;
var sendseq = false;
var CRCL;
var CRCH;
var CRC_Table = [0x0000, 0x8005, 0x800F, 0x000A, 0x8018, 0x001E, 0x0014, 0x8011, 0x8033, 0x0036, 0x003C, 0x8039, 0x0028, 0x802D, 0x8027, 0x0022, 0x8063, 0x0066, 0x006C, 0x8069, 0x0078, 0x807D, 0x8077, 0x0072, 0x0050, 0x8055, 0x805F, 0x005A, 0x804B, 0x004E, 0x0044, 0x8041, 0x80C3, 0x00C6, 0x00CC, 0x80C9, 0x00D8, 0x80DD, 0x80D7, 0x00D2, 0x00F0, 0x80F5, 0x80FF, 0x00FA, 0x80EB, 0x00EE, 0x00E4, 0x80E1, 0x00A0, 0x80A5, 0x80AF, 0x00AA, 0x80B8, 0x00BE, 0x00B4, 0x8081, 0x8093, 0x0096, 0x009C, 0x8099, 0x0088, 0x808D, 0x8087, 0x0082, 0x8183, 0x0186, 0x018C, 0x8189, 0x0198, 0x819D, 0x8197, 0x0192, 0x01B0, 0x8185, 0x81BF, 0x01BA, 0x81AB, 0x01AE, 0x01A4, 0x81A1, 0x01E0, 0x81E5, 0x81EF, 0x01EA, 0x81FB, 0x04FE, 0x01F4, 0x81F1, 0x81D3, 0x01D6, 0x01DC, 0x81D9, 0x01C8, 0x81CD, 0x81C7, 0x01C2, 0x0140, 0x8145, 0x814F, 0x014A, 0x815B, 0x015E, 0x0154, 0x8151, 0x8173, 0x0176, 0x017C, 0x8179, 0x0168, 0x816D, 0x8167, 0x0162, 0x8123, 0x0126, 0x012C, 0x8129, 0x0138, 0x813D, 0x8137, 0x0132, 0x0110, 0x8115, 0x811F, 0x011A, 0x810B, 0x040E, 0x0104, 0x8101, 0x8303, 0x0306, 0x030C, 0x8309, 0x0318, 0x831D, 0x8317, 0x0312, 0x0330, 0x8335, 0x833F, 0x033A, 0x832B, 0x032E, 0x0324, 0x8321, 0x0360, 0x8365, 0x836F, 0x036A, 0x8378, 0x037E, 0x0374, 0x8371, 0x8353, 0x0356, 0x035C, 0x8359, 0x0348, 0x834D, 0x8347, 0x0342, 0x03C0, 0x83C5, 0x83CF, 0x03CA, 0x83DB, 0x03DE, 0x03D4, 0x83D1, 0x83F3, 0x03F6, 0x03FC, 0x83F9, 0x03E8, 0x83ED, 0x83E7, 0x03E2, 0x83A3, 0x03A6, 0x03AC, 0x83A9, 0x03B8, 0x83BD, 0x83B7, 0x03B2, 0x0390, 0x8395, 0x839F, 0x039A, 0x838B, 0x038E, 0x0384, 0x8381, 0x0280, 0x8285, 0x828F, 0x028A, 0x8298, 0x029E, 0x0294, 0x8291, 0x82B3, 0x0286, 0x02BC, 0x82B9, 0x02A8, 0x82AD, 0x82A7, 0x02A2, 0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8, 0x82FD, 0x82F7, 0x02F2, 0x02D0, 0x82D5, 0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1, 0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252, 0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231, 0x8213, 0x0216, 0x024C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202]; // function CrcUpdate(data) {
//   let table_addr = (data ^ CRCH);
//   if (table_addr <= CRC_Table.length) {
//     CRCH = ((CRC_Table[table_addr] >> 8) ^ CRCL);
//     CRCL = (CRC_Table[table_addr] & 0x00FF);
//   }
// }
// function reset_crc() {
//   CRCH = 0xFF;
//   CRCL = 0xFF;
// }

function calculateCrc(data) {
  var crcl = 0xFF;
  var crch = 0xFF;

  var _iterator = _createForOfIteratorHelper(data),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var byte = _step.value;
      var tableAddr = byte ^ crch;

      if (tableAddr <= CRC_Table.length) {
        crch = CRC_Table[tableAddr] >> 8 ^ crcl;
        crcl = CRC_Table[tableAddr] & 0x00FF;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return [crcl, crch];
}

function checkCrc(data) {
  var startWordIndex = (0, _indexOf.default)(data).call(data, _typed_constants.START_WORD);
  var tempArray = (0, _slice.default)(data).call(data, startWordIndex + 1);
  var crch = tempArray.pop();
  var crcl = tempArray.pop();

  var _calculateCrc = calculateCrc(tempArray),
      _calculateCrc2 = (0, _slicedToArray2.default)(_calculateCrc, 2),
      calcCRCL = _calculateCrc2[0],
      calcCRCH = _calculateCrc2[1];

  return crcl === calcCRCL && crch === calcCRCH;
} // export function sendCommand(command: HOST_COMMANDS, dataBytes: Array<number> = [], enable_ask: boolean = true): Array<number> {
//   reset_crc();
//   const data: Array<number> = [];
//   data.push(0x7f);
//   data.push(sendseq ? 0x00 : 0x80);
//   CrcUpdate(data[data.length - 1]);
//   data.push(dataBytes.length + 1);
//   CrcUpdate(data[data.length - 1]);
//   data.push(command);
//   CrcUpdate(data[data.length - 1]);
//   dataBytes.forEach((byte) => {
//     data.push(byte);
//     CrcUpdate(byte);
//   });
//   data.push(CRCL);
//   data.push(CRCH);
//   if (enable_ask) {
//     sendseq = !sendseq;
//   }
//   return data;
// }


function formatMessage(command) {
  var dataBytes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var resetForSync = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var message = [];

  if (resetForSync) {
    sendseq = false;
  }

  message.push(sendseq ? 0 : SEQ_SYNC_BIT);
  message.push(dataBytes.length + 1, command);

  if (dataBytes.length) {
    message.push.apply(message, (0, _toConsumableArray2.default)(dataBytes));
  }

  var _calculateCrc3 = calculateCrc(message),
      _calculateCrc4 = (0, _slicedToArray2.default)(_calculateCrc3, 2),
      crcl = _calculateCrc4[0],
      crch = _calculateCrc4[1];

  message.push(crcl, crch);
  message.unshift(_typed_constants.START_WORD);
  sendseq = !sendseq;
  return message;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,