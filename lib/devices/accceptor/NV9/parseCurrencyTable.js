"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = parseSetup;
exports.mergeNumbers = mergeNumbers;
exports.parseUnitType = parseUnitType;

var _reduce = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/reduce"));

var _slice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/slice"));

var BYTE_OFFSET_VALUE_MULTIPLIER = 8;
var BYTE_OFFSET_NUMBER_OF_CHANNELS = 11;

function mergeNumbers(data) {
  var value = (0, _reduce.default)(data).call(data, function (acc, currentValue) {
    return acc << 8 | currentValue;
  });
  return value === 0 ? 1 : value;
}

function numberArrayToASCII(data) {
  return (0, _reduce.default)(data).call(data, function (acc, current) {
    acc += String.fromCharCode(current);
    return acc;
  }, "");
}

function parseSetup(data) {
  var dataToParse = (0, _slice.default)(data).call(data, 4, data.length - 2);
  var unitType = parseUnitType(dataToParse[0]);
  var firmwareVersion = numberArrayToASCII((0, _slice.default)(dataToParse).call(dataToParse, 1, 5));
  var countryCode = numberArrayToASCII((0, _slice.default)(dataToParse).call(dataToParse, 5, 8));
  var currencyTable = parseCurrencyTable(dataToParse);
  var valueMultiplier = mergeNumbers((0, _slice.default)(dataToParse).call(dataToParse, BYTE_OFFSET_VALUE_MULTIPLIER, BYTE_OFFSET_VALUE_MULTIPLIER + 3));
  var numberOfChannels = dataToParse[BYTE_OFFSET_NUMBER_OF_CHANNELS];
  return {
    countryCode: countryCode,
    currencyTable: currencyTable,
    firmwareVersion: firmwareVersion,
    numberOfChannels: numberOfChannels,
    unitType: unitType,
    valueMultiplier: valueMultiplier
  };
}

function parseCurrencyTable(data) {
  var valueMultiplier = mergeNumbers((0, _slice.default)(data).call(data, BYTE_OFFSET_VALUE_MULTIPLIER, BYTE_OFFSET_VALUE_MULTIPLIER + 3));
  var numberOfChannels = data[BYTE_OFFSET_NUMBER_OF_CHANNELS];
  var lengthOfDataToParse = numberOfChannels * 2 + 3;
  var dataToParse = (0, _slice.default)(data).call(data, BYTE_OFFSET_NUMBER_OF_CHANNELS + 1, BYTE_OFFSET_NUMBER_OF_CHANNELS + lengthOfDataToParse + 2);
  var result = [];

  for (var i = 0; i < numberOfChannels; ++i) {
    var value = dataToParse[i] * valueMultiplier;
    result.push({
      value: value,
      denominator: i + 1
    });
  }

  return result;
}

function parseUnitType(code) {
  var result;

  switch (code) {
    case 0x00:
      result = "BANKNOTE_VALIDATOR";
      break;

    case 0x08:
      result = "ADDON_PRINTER";
      break;

    case 0x03:
      result = "SMART_HOPPER";
      break;

    case 0x0B:
      result = "STAND_ALONE_PRINTER";
      break;

    case 0x06:
      result = "SMART_PAYOUT";
      break;

    case 0x09:
      result = "SMART_COIN_SYSTEM";
      break;

    case 0x07:
      result = "NOTE_FLOAT";
      break;

    default:
      result = "UNKNOWN_TYPE";
  }

  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kZXZpY2VzL2FjY2NlcHRvci9OVjkvcGFyc2VDdXJyZW5jeVRhYmxlLnRzIl0sIm5hbWVzIjpbIkJZVEVfT0ZGU0VUX1ZBTFVFX01VTFRJUExJRVIiLCJCWVRFX09GRlNFVF9OVU1CRVJfT0ZfQ0hBTk5FTFMiLCJtZXJnZU51bWJlcnMiLCJkYXRhIiwidmFsdWUiLCJhY2MiLCJjdXJyZW50VmFsdWUiLCJudW1iZXJBcnJheVRvQVNDSUkiLCJjdXJyZW50IiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwicGFyc2VTZXR1cCIsImRhdGFUb1BhcnNlIiwibGVuZ3RoIiwidW5pdFR5cGUiLCJwYXJzZVVuaXRUeXBlIiwiZmlybXdhcmVWZXJzaW9uIiwiY291bnRyeUNvZGUiLCJjdXJyZW5jeVRhYmxlIiwicGFyc2VDdXJyZW5jeVRhYmxlIiwidmFsdWVNdWx0aXBsaWVyIiwibnVtYmVyT2ZDaGFubmVscyIsImxlbmd0aE9mRGF0YVRvUGFyc2UiLCJyZXN1bHQiLCJpIiwicHVzaCIsImRlbm9taW5hdG9yIiwiY29kZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBTUEsNEJBQTRCLEdBQUcsQ0FBckM7QUFDQSxJQUFNQyw4QkFBOEIsR0FBRyxFQUF2Qzs7QUFzQk8sU0FBU0MsWUFBVCxDQUF1QkMsSUFBdkIsRUFBb0Q7QUFDekQsTUFBTUMsS0FBSyxHQUFHLHFCQUFBRCxJQUFJLE1BQUosQ0FBQUEsSUFBSSxFQUFRLFVBQUNFLEdBQUQsRUFBTUMsWUFBTjtBQUFBLFdBQXdCRCxHQUFHLElBQUksQ0FBUixHQUFhQyxZQUFwQztBQUFBLEdBQVIsQ0FBbEI7QUFDQSxTQUFRRixLQUFLLEtBQUssQ0FBWCxHQUFnQixDQUFoQixHQUFvQkEsS0FBM0I7QUFDRDs7QUFFRCxTQUFTRyxrQkFBVCxDQUE2QkosSUFBN0IsRUFBMEQ7QUFDeEQsU0FBTyxxQkFBQUEsSUFBSSxNQUFKLENBQUFBLElBQUksRUFBUSxVQUFDRSxH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QUssSUFBTDtBQUNFQSxNQUFBQSxNQUFNLEdBQUcscUJBQVQ7QUFDQTs7QUFDRixTQUFLLElBQUw7QUFDRUEsTUFBQUEsTUFBTSxHQUFHLGNBQVQ7QUFDQTs7QUFDRixTQUFLLElBQUw7QUFDRUEsTUFBQUEsTUFBTSxHQUFHLG1CQUFUO0FBQ0E7O0FBQ0YsU0FBSyxJQUFMO0FBQ0VBLE1BQUFBLE1BQU0sR0FBRyxZQUFUO0FBQ0E7O0FBQ0Y7QUFDRUEsTUFBQUEsTUFBTSxHQUFHLGNBQVQ7QUF2Qko7O0FBeUJBLFNBQU9BLE1BQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEJZVEVfT0ZGU0VUX1ZBTFVFX01VTFRJUExJRVIgPSA4O1xuY29uc3QgQllURV9PRkZTRVRfTlVNQkVSX09GX0NIQU5ORUxTID0gMTE7XG5cbnR5cGUgU1NQVW5pdFR5cGUgPSBcIkJBTktOT1RFX1ZBTElEQVRPUlwiIHxcbiAgXCJBRERPTl9QUklOVEVSXCIgfFxuICBcIlNNQVJUX0hPUFBFUlwiIHxcbiAgXCJTVEFORF9BTE9ORV9QUklOVEVSXCIgfFxuICBcIlNNQVJUX1BBWU9VVFwiIHxcbiAgXCJTTUFSVF9DT0lOX1NZU1RFTVwiIHxcbiAgXCJOT1RFX0ZMT0FUXCIgfFxuICBcIlVOS05PV05fVFlQRVwiO1xuXG5leHBvcnQgdHlwZSBTU1BDdXJyZW5jeVRhYmxlID0gQXJyYXk8eyBkZW5vbWluYXRvcjogbnVtYmVyLCB2YWx1ZTogbnVtYmVyIH0+O1xuXG50eXBlIFNTUFNldHVwVjYgPSB7XG4gIHVuaXRUeXBlOiAgU1NQVW5pdFR5cGU7XG4gIGZpcm13YXJlVmVyc2lvbjogc3RyaW5nO1xuICBjb3VudHJ5Q29kZTogc3RyaW5nO1xuICB2YWx1ZU11bHRpcGxpZXI6IG51bWJlcjtcbiAgbnVtYmVyT2ZDaGFubmVsczogbnVtYmVyO1xuICBjdXJyZW5jeVRhYmxlPzogU1NQQ3VycmVuY3lUYWJsZTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZU51bWJlcnMgKGRhdGE6IEFycmF5PG51bWJlcj4pOiBudW1iZXIge1xuICBjb25zdCB2YWx1ZSA9IGRhdGEucmVkdWNlKChhY2MsIGN1cnJlbnRWYWx1ZSkgPT4gKGFjYyA8PCA4KSB8IGN1cnJlbnRWYWx1ZSk7XG4gIHJldHVybiAodmFsdWUgPT09IDApID8gMSA6IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBudW1iZXJBcnJheVRvQVNDSUkgKGRhdGE6IEFycmF5PG51bWJlcj4pOiBzdHJpbmcge1xuICByZXR1cm4gZGF0YS5yZWR1Y2UoKGFjYywgY3VycmVudCkgPT4ge1xuICAgIGFjYyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGN1cnJlbnQpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIFwiXCIpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhcnNlU2V0dXAoZGF0YTogQXJyYXk8bnVtYmVyPik6IFNTUFNldHVwVjYge1xuICBjb25zdCBkYXRhVG9QYXJzZTogQXJyYXk8bnVtYmVyPiA9IGRhdGEuc2xpY2UoNCwgZGF0YS5sZW5ndGggLSAyKTtcbiAgY29uc3QgdW5pdFR5cGUgPSBwYXJzZVVuaXRUeXBlKGRhdGFUb1BhcnNlWzBdKTtcbiAgY29uc3QgZmlybXdhcmVWZXJzaW9uOiBzdHJpbmcgPSBudW1iZXJBcnJheVRvQVNDSUkoZGF0YVRvUGFyc2Uuc2xpY2UoMSwgNSkpO1xuICBjb25zdCBjb3VudHJ5Q29kZTogc3RyaW5nID0gbnVtYmVyQXJyYXlUb0FTQ0lJKGRhdGFUb1BhcnNlLnNsaWNlKDUsIDgpKTtcbiAgY29uc3QgY3VycmVuY3lUYWJsZSA9IHBhcnNlQ3VycmVuY3lUYWJsZShkYXRhVG9QYXJzZSk7XG4gIGNvbnN0IHZhbHVlTXVsdGlwbGllciA9IG1lcmdlTnVtYmVycyhkYXRhVG9QYXJzZS5zbGljZShCWVRFX09GRlNFVF9WQUxVRV9NVUxUSVBMSUVSLCBCWVRFX09GRlNFVF9WQUxVRV9NVUxUSVBMSUVSICsgMykpO1xuICBjb25zdCBudW1iZXJPZkNoYW5uZWxzID0gZGF0YVRvUGFyc2VbQllURV9PRkZTRVRfTlVNQkVSX09GX0NIQU5ORUxTXTtcbiAgcmV0dXJuIHtcbiAgICBjb3VudHJ5Q29kZSxcbiAgICBjdXJyZW5jeVRhYmxlLFxuICAgIGZpcm13YXJlVmVyc2lvbixcbiAgICBudW1iZXJPZkNoYW5uZWxzLFxuICAgIHVuaXRUeXBlLFxuICAgIHZhbHVlTXVsdGlwbGllclxuICB9O1xufVxuXG5mdW5jdGlvbiBwYXJzZUN1cnJlbmN5VGFibGUoZGF0YTogQXJyYXk8bnVtYmVyPik6IFNTUEN1cnJlbmN5VGFibGUge1xuICBjb25zdCB2YWx1ZU11bHRpcGxpZXI6IG51bWJlciA9IG1lcmdlTnVtYmVycyhkYXRhLnNsaWNlKEJZVEVfT0ZGU0VUX1ZBTFVFX01VTFRJUExJRVIsIEJZVEVfT0ZGU0VUX1ZBTFVFX01VTFRJUExJRVIgKyAzKSk7XG4gIGNvbnN0IG51bWJlck9mQ2hhbm5lbHMgPSBkYXRhW0JZVEVfT0ZGU0VUX05VTUJFUl9PRl9DSEFOTkVMU107XG4gIGNvbnN0IGxlbmd0aE9mRGF0YVRvUGFyc2UgPSBudW1iZXJPZkNoYW5uZWxzICogMiArIDM7XG4gIGNvbnN0IGRhdGFUb1BhcnNlID0gZGF0YS5zbGljZShCWVRFX09GRlNFVF9OVU1CRVJfT0ZfQ0hBTk5FTFMgKyAxLCBCWVRFX09GRlNFVF9OVU1CRVJfT0ZfQ0hBTk5FTFMgKyBsZW5ndGhPZkRhdGFUb1BhcnNlICsgMik7XG4gIGNvbnN0IHJlc3VsdDogU1NQQ3VycmVuY3lUYWJsZSA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mQ2hhbm5lbHM7ICsraSkge1xuICAgIGNvbnN0IHZhbHVlID0gZGF0YVRvUGFyc2VbaV0gKiB2YWx1ZU11bHRpcGxpZXI7XG4gICAgcmVzdWx0LnB1c2goeyB2YWx1ZSwgZGVub21pbmF0b3I6IGkgKyAxIH0pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVVuaXRUeXBlIChjb2RlOiBudW1iZXIpOiBTU1BVbml0VHlwZSB7XG4gIGxldCByZXN1bHQ6IFNTUFVuaXRUeXBlO1xuICBzd2l0Y2ggKGNvZGUpIHtcbiAgICBjYXNlIDB4MDA6XG4gICAgICByZXN1bHQgPSBcIkJBTktOT1RFX1ZBTElEQVRPUlwiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDA4OlxuICAgICAgcmVzdWx0ID0gXCJBRERPTl9QUklOVEVSXCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDM6XG4gICAgICByZXN1bHQgPSBcIlNNQVJUX0hPUFBFUlwiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDBCOlxuICAgICAgcmVzdWx0ID0gXCJTVEFORF9BTE9ORV9QUklOVEVSXCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDB4MDY6XG4gICAgICByZXN1bHQgPSBcIlNNQVJUX1BBWU9VVFwiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDA5OlxuICAgICAgcmVzdWx0ID0gXCJTTUFSVF9DT0lOX1NZU1RFTVwiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAweDA3OlxuICAgICAgcmVzdWx0ID0gXCJOT1RFX0ZMT0FUXCI7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVzdWx0ID0gXCJVTktOT1dOX1RZUEVcIjtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufSJdfQ==